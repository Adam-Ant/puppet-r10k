#!/opt/puppet/bin/ruby
# This mini-webserver is meant to be run as the peadmin user
# so that it can call mcollective from a puppetmaster
# Authors:
# Ben Ford
# Adam Crews
# Zack Smith
# Jeff Malnick

require 'rubygems'

require 'sinatra/base'
require 'webrick'
require 'webrick/https'
require 'openssl'
require 'mcollective'
require 'resolv'
require 'json'
require 'yaml'
require 'pry'
include MCollective::RPC


WEBHOOK_CONFIG = '/etc/webhook.yaml'


if (File.exists?(WEBHOOK_CONFIG))
  $settings = YAML.load_file(WEBHOOK_CONFIG)
else
  raise "Configuration file: #{WEBHOOK_CONFIG} does not exist"
end

ENV['HOME'] = '/var/lib/peadmin'
ENV['PATH'] = '/sbin:/usr/sbin:/bin:/usr/bin:/opt/puppet/bin'

$logger = WEBrick::Log::new($settings['logfile'], WEBrick::Log::INFO)

APP_ROOT = '/var/run/webhook'

opts = {
        :Port               => $settings['port'],
        :Logger             => $logger,
        :ServerType         => WEBrick::Daemon,
        :SSLEnable          => true,
        :SSLVerifyClient    => OpenSSL::SSL::VERIFY_NONE,
        :SSLCertificate     => OpenSSL::X509::Certificate.new(  File.open(File.join("#{$settings['certpath']}", "#{$settings['certname']}-cert.pem")).read),
        :SSLPrivateKey      => OpenSSL::PKey::RSA.new(          File.open(File.join("#{$settings['certpath']}", "#{$settings['certname']}-private.pem")).read),
        :SSLCertName        => [ [ "CN",WEBrick::Utils::getservername ] ]
}


class Server  < Sinatra::Base

  set :static, false


  get '/' do
    raise Sinatra::NotFound
  end

  # curl -d '{ "ref": "refs/heads/production" }'  -H "Accept: application/json" 'https://puppet:puppet@localhost:8088/payload' -k -q
  post '/payload' do
    protected! if $settings['protected']
    request.body.rewind  # in case someone already read it
    data = JSON.parse(request.body.read, :quirks_mode => true)
    branch = data['ref'].split("/").last
    deploy(branch)
  end

  not_found do
    halt 404, "You shall not pass! (page not found)\n"
  end

  helpers do
    def deploy(branch)
      begin
        if $settings['use_mco_ruby']
          result = mco(branch).first
          if result.results[:statuscode] == 0
            message = result.results[:statusmsg]
          else
            raise result.results[:statusmsg]
          end
        else
          message = "triggered: mco r10k deploy #{branch} -p"
          Process.detach(fork{ exec "/opt/puppet/bin/mco r10k deploy #{branch} -p >> #{LOGFILE} 2>&1 &"})
        end
        $logger.info("message: #{message} branch: #{branch}")
        {:status => :success, :message => message.to_s }.to_json
     rescue => e
        $logger.error("message: #{e.message} trace: #{e.backtrace}")
        {:status => :fail, :message => e.message, :trace => e.backtrace}.to_json
      end
    end  #end deploy()

   def mco(branch)
     options =  MCollective::Util.default_options
     options[:config] = $settings['client_cfg']
     client = rpcclient('r10k', :exit_on_failure => false,:options => options)
     client.discovery_timeout = $settings['discovery_timeout']
     client.timeout           = $settings['client_timeout']
     result = client.send('deploy',{:environment => branch})
   end # end deploy()


    def protected!
      unless authorized?
        response['WWW-Authenticate'] = %(Basic realm="Restricted Area")
        throw(:halt, [401, "Not authorized\n"])
      end
    end  #end protected!

    def authorized?
      @auth ||=  Rack::Auth::Basic::Request.new(request.env)
      @auth.provided? && @auth.basic? && @auth.credentials &&
      @auth.credentials == [$settings['user'],$settings['pass']]
    end  #end authorized?
  end  #end helpers
end

Rack::Handler::WEBrick.run(Server, opts) do |server|
  [:INT, :TERM].each { |sig| trap(sig) { server.stop } }
end
